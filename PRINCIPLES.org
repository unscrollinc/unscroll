* Principles for Making Unscroll

** Date + Time

- Date + time are hard
  - luxon is fine
  - Don't worry about calendar disasters of the past
  - Don't worry about pre-4000BC
  - Don't worry about weird datetime stuff yet
  - Follow the principle of the latest possible date. I.e. "Circa 1972" = December 31, 1972 at midnight.
  - Track resolution. "Circa 1972" has a resolution of 4.
  - Preserve the original datetime
  - Continually work on one smartish date extractor and incrementally improve it.
  - Nothing will ever work perfectly and you will never have enough information to do it right.

** Data

- API imports
  - Follow the rules and regulations.
  - Use it as a guide for spidering.

- Web Spidering
  - Follow robots.txt and do things right.
  - Need to build a big spider.
  - Sadly it's usually going to be better for our use case to spider than download data dumps or use APIs.

** API
- Django Rest Framework is fine
  - Let the models and framework do as much work as possible.
  - Use ModelViewSet as much as possible
  - That's your primary magic.
  - Otherwise keep stuff pretty explicit.
  - As few endpoints as possible,
    - Each one vetted for permissions (esp. on nested objects)
    - Each filterable.

** Caching
- Cache event sets, esp low-read ones.

- Cache notebooks.

- Don't overdo it.

** Frontend 
- React is fine

- React starter kit is fine

- State
  - Local state wherever possible
  - React Context when you'd otherwise be handing functions down the prop tree
  - Immutable state unless it's ridiculous to implement
  - Document stateful and messy stuff
  - Cookies are fine for auth token
  - Global stuff like cookie-loader goes in Util/Util.js

- Refs, Props, etc.
  - Avoid refs (use them for object sizing only)

- Integration with backend
  - Axios is fine
  - Patch over Put
  - Hit the server and don't get precious

- Verbs
  - talking to API: overload REST verbs
    - postFoo(): make the state of a Foo, POST it, and update state with any changes
    - getFoo(): GET one foo from the server and put it into state 
    - getFoos(): GET some foos from the server and put them into state 
    - patchFoo(): save a foo on the server with a PUT or PATCH and put any relevant updates into state
    - deleteFoo(): DELETE a foo from the server and remove it from state
    - searchFoos(): search through foos from the server and remove it from state
    - addFooToBar(): put Foo inside a map or array in Bar
    - removeFooFromBar(): remove Foo from a map or array in Bar

  - drawing things in screen: overload "render"
    - renderFoo(): return the JSX necessary to render a Foo

** DevOps
- One server is okay to launch.
- Measure before optimizing.
- Have an optimization path in mind.
  - Postgres search -> Elasticsearch
  - IDs -> UUIds
