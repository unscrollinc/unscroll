#+TITLE: Unscroll Overall Notes
#+AUTHOR: Paul Ford

* A MetaCommons
- News
- Serials
- Humans
- Historical Events
- Music
- Films
- TV serials
- Radio
- Podcasts


https://github.com/WGBH/AAPB2#api
https://chroniclingamerica.loc.gov/batches.json
https://chroniclingamerica.loc.gov/batches/
https://toolbox.google.com/datasetsearch/search?query=historical&docid=41XkXsqWDskevlQnAAAAAA%3D%3D
https://www.blog.google/products/search/making-it-easier-discover-datasets/
- News
- Sports

https://toolbox.google.com/datasetsearch/search?query=120%20years%20of%20Olympic%20history%3A%20athletes%20and%20results&docid=DEJvaZ%2FLlshtkBKdAAAAAA%3D%3D

All things can be linked and sliced and diced digitally, but I think it is a very obvious decision to keep organizing corpora by media type, because that is how culture produces them. I cannot switch readily from writer to cartographer, without years of labor.

What is tricky is: A CD-ROM of pictures, like this one of . It is meaningfu

Certainly new forms arise but we arrange ourselves around them.

There are cultural assumptions that come with forms. A map describes a place. A book collects words and pictures into a sequence. A history book describes things that happened. A fictional story describes the contents of a writer's emotions.

So if we are arranging things by forms, we need simply ask, where are all the X, where X is a commonly understood form. There are always going to be exceptions but we seek ease. Search will bind our 

Identifiers

I'm just going to use UUIDs, MD5 sums, and Library of Congress Subject Headings.


In English:

- Books
Here we have the Library of Congress as a canonical resource. Or even Amazon. Books for over a century are discrete-mass produced objects that have identifiers; before that, there were fewer books. Self-published books are really something here. God help us.


I'm just going to use UUIDs and the Library of Congress.

- Email Mailboxes

- Usenet news groups

- Moving Pictures

- Recorded audio
An incomplete . 

- Maps
This is going to be scattershot.

- Artworks
This one is very hard. There is art everywhere. Museums collect theirs into digital resources. But the Botero in the Time Warner center---it might as well be on the moon. 


- 

* Development Environment
#+BEGIN_SRC bash
mkvirtualenv ~/local/env/unscroll
git clone $UNSCROLL_GITHUB_REPO
cd unscroll/server
pipenv install
#+END_SRC
* Components

* Unscroll

Unscroll has a few goals, related to how I see the world and where I see things going in the world.

It is essentially a composition environment for the next 20-30 years based on my own learning and what I see of the web.

It's designed to address a number of gaps in culture (notice I didn't say "market gaps"):

** What Gaps Are We Seeking to Fill?
*** Editorial Gaps
 - Editorial organizations are dying and fact-checking and editorial support are going away. Most of the sources we trusted in the last ten years will be gone in ten years. The ones that replace them have high turnover and are traded around.
 - Humans are really bad at thinking sequentially about things. A vast number of errors in thinking are due to bad chronology. Context is very hard to maintain. There are a host of old-school fallacies related to this, like the historian's fallacy and the historical fallacy, gambler's fallacy.
*** Interface Gaps
 - Minimalism has failed writers IMO. It creates a situation in which you're NOT supposed to use all the tools of the Internet to solve things.
 - The domain of TIME has never been a first-class citizen on the web, unlike geography/mapping, social relationships and social networks, commerce, and news.
 - Documents in composition are made of fragments and objects not simply long runs of text, even if the end result is one (hopefully) smooth line of prose. That is, composition and reading are different. Unscroll is pretty orthodox about this; it's really more of a composition platform than a publishing platform and it has incredibly strong opinions about editing and workflow.
 - Linking is a pain. Full hypertext abstraction is not useful for most humans and adding links is kind of hard. Also links die. People need things to touch and link to. So we give them events, as many as they want until they feel secure in their thoughts.
 - Mobile web composition is very hard and you lose your place a lot.
*** Cultural Commons Gaps
 - Data in the commons is often trash and there's no way to improve it. Wikipedia and Archive.org are the best so far and they have a really hard time and they don't encourage you to make new, pretty things.
 - It should be easier to get things from the web /into/ the commons.
 - To encourage a more robust commons you need to help people get into the commons.


** Understanding This Thing

But these are all tactics and responses. The reason for Unscroll to exist is so that people have tools to tell true stories well, because humans need to tell stories and humans need to read them, and to create a positive feedback loop between improving the commons and the fundamental act of storytelling.

Think of project as a marathon, not a sprint. The goal is for it to last for 10, 20, 30 years. What organizational, technological, and culture patterns will ensure survival? So:

- It could be placed on cloud infrastructure.
- It could be simplified and features removed.
- It could emphasize writing over reading.
- It could fork and release an enterprise product.
- It could become a desktop app.
- It could release all its data into the commons.
- It could insist that everything be CC-licensed.
- It could be open-sourced.
- It could be federated.
- It could be built by an agency.
- It could be built by a small team.
- It could be centralized.
- It could be academic.
- It could live on its own as a centralized service.
- It could be purchased by a company.
- It could be not-for-profit.
- It could seek to raise venture capital.
- It could seek not-for-profit grant-based funding.
- It could have advertising.
- It could have subscriptions.
- It could exist entirely in the commons as a public platform.
- It could remain Paul's Folly.

But the important thing is to think of all of those things as /paths to sustainability/ not as ends in themselves. The current path to sustainability is just launching.

Every single one of the bulleted things above comes with ingroup/outgroup advocacy. There are people who will argue that Python is better than JavaScript and vice-versa. That VC is great because of the network it brings you. That open-source is neccessary for anything that really matters. It sounds odd to say but the fallacy of tech is its belief in technological solutions.

Before doing anything, you probably want want to test each assumption by adding, to the end of each line, "because if we do so that will ensure people will stay connected over many years, because...." And then: "Even though..." and list all the reasons you've seen that thriving social communities don't come into being just because someone did something that seemed promising. This whole industry is filled with tactics branded as strategy. Open source being the best example: Usually too little, usually, too late, and your fault. Being bought is another: Big promises are made but ultimately things always return to the mean.

You need to throw down the gauntlet; you need to make it worth their while; you need to make it clear that they should get on the bus now, before the bus leaves them at the bus stop. And that's fine. But ultimately the risk is simply that people won't connect, endorse, use, and pay for a thing. The only way to cut risk is humility. Shut up, listen, and protect your flank. Everyone is on a journey and wants better tools, for the journey is long and the tools make their hands bleed.

But an awful lot of failures when you break them down, people have a specific path in mind that leads to a specific outcome in which they look good, become wealthy, or achieve some goal. Very few things on the Internet seem to be designed with sustainability in mind.

The key to sustainability is in spending all of your time and energy to increase optionality. That's what I've learned in the last three years, running a business. I learned it from my co-founder. Having the maximum number of options in front of you then making the best possible choices for the business. Having the most inbound leads, the bigger marketing mailing list. Knock on all the doors. Talk to the VCs, the bankers, the academics. Could you run this with one employee? Zero? If you do that, of course, the community you need for sustainability vanishes; you need people besides yourself to be in on the optionality game.

*** Data

**** Data Model

  | Parent   | Child |
  |----------+-------|
  | /Group/  | User  |
  | Notebook | Note  |
  | Scroll   | Event |

  Group is not implemented (well it is in Django just not reall).

  Event must have a =when_happened= field in PostgreSQL-parseable
  datetime format.

**** Relationships/Foreign Keys


  | From     | To       | =by_= | =in_= | =with_= |
  |----------+----------+-------+-------+---------|
  | Scroll   | User     | X     |       |         |
  |----------+----------+-------+-------+---------|
  | Event    | User     | X     |       |         |
  | ''       | Scroll   |       | X     |         |
  |----------+----------+-------+-------+---------|
  | Notebook | User     | X     |       |         |
  |----------+----------+-------+-------+---------|
  | Note     | User     | X     |       |         |
  | ''       | Notebook |       | X     |         |
  | ''       | Event    |       |       | X       |

*** Server

  Server is built in Django + django-rest-framework. It's lumpy and
  annoying but then you get the hang of it. All of the real work is in
  the PostgreSQL schema, though, and ultimately this thing should be
  rewritten.

  Like I said: Lumpy.

  I stayed with one-server-in-some-cloud model because I didn't want to
  prematurely optimize anything and I wasn't sure if I was building this
  for one person, a workgroup, or the web. Mostly because I was learning
  React and you only want to learn one new huge thing per project or
  you'll lose your mind.

*** Future Plans
**** Improvements 
- Timelines could be much better. 
- Timelists could be much better.
- Edit experience could do things.
- Searches can be saved.

**** Core functionality
  - Social graph :: I follow people and organizations and see the events and notebooks they're adding.
  - Workgroup :: One individual creates a Scroll; a group of approved individuals can add and edit Events. One individual creates a Notebook; a group of approved individuals can add and edit Notes. 

*** How Could This Thing be Optimized
  Optimization path is pretty clear:

  1) Login/API to whatever service makes sense.

  2) Event and Note retrieval from PostgreSQL to ElasticSearch or other
  inverted-btree/id-retrieval platform. Retrieval patterns are basically
  all in the form:
   - Items X in Bag Y sorted by Z and [optionally] Paged
     - (Events in Scroll 1 sorted by =when_happened= and paged)
   - Items X matching Search Y sorted by Z and Paged
   - Image/thumbnail hosting to S3 or similar cache.

  This thing could scale if you ever wanted. The Event objects are
  super-light, you could even cap them at 2-3Kb and thus have a couple
  billion on a server.

  I try to let the database do a lot which django fights a little; lots
  of =select_related()= function calls off the query object.

  The overall API design is okay. The niceties aren't there, like snake
  case, and some of the fields need to be balanced out. There isn't a
  really clear sense of users--sometimes I give you =scroll_username,
  etc. There's some bad future-proofing; for example Events are in a
  many-to-one relationship to Scrolls and should simply inherit Scroll
  authorship (same true of Note/Notebook) but I track author the whole
  way.


*** Client

 Client is react using create-react-app and react context API (no
 flux). I was learning react as I went and that shows; at first I had
 the whole world in my context and then I started to factor out to
 components. It's sort of halway where it needs to be. My basic pattern
 now is:

 component
    constructor()

    utilities()
 
    someServerLogic() # usually in componentdidmount
    someOtherserverLogic()
 
    renderSomePart()
    renderSomeOtherPart()
    render() # put it all together

 with everything returning null at the end, but I'm not 100% there.

 Didn't use a CSS preprocessor CUZ I'M OLD.

 That said my instinct is that this is like 30% oooof what the hell and
 60% sure i'd do it differently and 10% okay wow that's interesting.




* Presentation: When a Side Project Wants to Kill You
Or; Building an Inspiration Machine

Joy Carol Oates tweet

* Where I came from
* I was overtaken by a fear

- anecdote about email
- what the hell did i actually learn
well i learned a lot of stuff, facts
and i learned how to get along in the world

inspiration is not about motivation as much as reducing that sense of fraudulence
when new tools come along we actually fight them pretty hard
these are images I keep around
there are so many people out there ready to tell you
and there are always a great number of peopl
but let's position it differently

that is inspiration is not about getting inspired
there's no magic inspirational liquid
just about reducing friction
getting rid of the sense that one is a fraud
and I think there's a general inspirational industry
that makes those little rectangles
but that if you find yourself at need for inspiration
you might want to be suspicious of them
and look at your own fraudulence not as some grave affliction
but ask yourself what tools will work 
it's about decreasing the risk that you'll be frozen in place by your own fraudulence

and I am appreciative of that
the irony is that they come to me and say, hey do you want to talk to a big room of strangers

i wanted to prove to you all that I am not a fraud
as to whether I am or not, I have my on opinions, and you are totally free to make up your own mind. thank you.

- Write four or five essays
  - Looking at books
  - Explain why I'm doing readings
  - Press releases
  - Raccoon
  - My life in software
  - Something personal about a human being
  - Something about creative energy getting unleashed
  - Lincoln center and a place in which energy is unleashed
  - Most things are a social network with activity hanging off of them

- The five motivations
  - Curiosity
  - The Failure of Historical timelines
    - Book on timelines
    - You can fall in love with an interface but it's not what you thought it would be.
    - So now I'd built some timelines.
    - And I put them aside for a while.
    - Then about four years ago, I signed a book contract.
  - Jealousy
  - Being awesome
  - Procrastination/Fraudulence
    - Started a company
      - I can't bring them into my mess until I truly knew what my mess even was.
      - You are what you do when you procrastinate. You think you're the thing you're putting off. But you're the thing.
      - So around Christmas I just started over.
  - Personal transformation

  - A deadline
    - And they came to me . St
    - The second time I tried to launch it
    - Discovery and Curiousity

- Make the five videos
  - Timeline in use with no events
  - Timeline responding to search and playing a song
  - Timeline playing a song
  - Adding things to the timeline
  - Writing in the timeline
  - Essay
  
* For June 9 Demo

- Final checklisty stuff
  - [ ] Delete a scroll
  - [ ] Fix reordering bugs
  - [ ] Reflow events when event is added.
  - [ ] List all my events?

- Account 
  + [X] Register
  + [X] Confirm
  + [X] Log in to the site
  + [X] Log out

- API
  - [X] Endpoints for notebook
  - [X] Search endpoint and database modification
  - [X] Search only a scroll
  - [ ] Delete a scroll
  - [ ] List scrolls owned by person
  - [ ] List scrolls by search title
  - [ ] List scrolls by mediatype
  - [ ] List scroplls by contenttype

- Timeline
  - [X] Zoom in and out of time
  - [X] Show prioritization of time
  - [X] Listen to something
  - [X] Switch to "list view"
  - [X] Add an event
    - [X] Pop up event input
  - [X] Edit an event

- Notebook 
  - [X] Make a new notebook.
  - [X] Title notebook
  - [X] Add event to notebook
  - [X] Show notebook as "essay"
  - [X] Add to notebook
  - [X] Publish a notebook

* Actual Notes

** Startup is basically:

*** Local Dev
- =# nginx -c"/Users/ford/dev/unscroll/config/nginx/nginx_dev.conf" -s reload=
- =$ DJANGO_SETTINGS_MODULE=unscroll.settings_dev gunicorn -p /tmp/gunicorn.sock --bind 0.0.0.0:8000 unscroll.wsgi:application=
- (or)
- =$ DJANGO_SETTINGS_MODULE=unscroll.settings_dev ./manage.py runserver=


*** Server dev
- # nginx -c"/home/unscroll/unscroll/config/nginx/nginx.conf" -s reload
- # su - unscroll
- $ cd /home/unscroll/unscroll/unscroll/
- $ gunicorn -p /home/unscroll/socket/gunicorn.sock --bind 0.0.0.0:8000 unscroll.wsgi:application


Nothing is daemonized or in upstart or anything.

https://unscroll.com
A writing tool for people who need to get it right.



** Installing on Ubuntu

Cake to get a working postgresql. Hardly any work.

Got rid of all migrations and started fresh, with a custom migration
after the initial to set up the full-text indexes.

Took a while to get pip working, just normal stuff.
- Needs Python3.6.
- cryptography didn't want to install.
- unded up googling around until I found
  - apt-get install libffi-dev libssl-dev libxml2-dev libxslt1-dev libjpeg8-dev zlib1g-dev
- Which I installed

After that Gunicorn seems to just be running. Had to add the server's
IP and so unscroll.com to allowed hosts. Took most of the
configuration settings from the Gunicorn.

All the regular nginx stuff. I copied a bit over from the default
nginx setup to get the user/group right.

Only big surprise was that once I got everything configured right with
the proxy the ^/ regexp URL matcher stopped working for the API
proxying; just matching the API to '' worked fine.

	  url(r'^/', include(router.urls)),

Needed to become

	  url(r'', include(router.urls)),

Took a minute to figure out.

In general though getting from Mac to Ubuntu took an hour or two to
smooth things out.

* Principles for Making Unscroll

** Date + Time

- Date + time are hard
  - luxon is fine
  - Don't worry about calendar disasters of the past
  - Don't worry about pre-4000BC
  - Don't worry about weird datetime stuff yet
  - Follow the principle of the latest possible date. I.e. "Circa 1972" = December 31, 1972 at midnight.
  - Track resolution. "Circa 1972" has a resolution of 4.
  - Preserve the original datetime
  - Continually work on one smartish date extractor and incrementally improve it.
  - Nothing will ever work perfectly and you will never have enough information to do it right.

** Data

- API imports
  - Follow the rules and regulations.
  - Use it as a guide for spidering.

- Web Spidering
  - Follow robots.txt and do things right.
  - Need to build a big spider.
  - Sadly it's usually going to be better for our use case to spider than download data dumps or use APIs.

** API
- Django Rest Framework is fine
  - Let the models and framework do as much work as possible.
  - Use ModelViewSet as much as possible
  - That's your primary magic.
  - Otherwise keep stuff pretty explicit.
  - As few endpoints as possible,
    - Each one vetted for permissions (esp. on nested objects)
    - Each filterable.

** Caching
- Cache event sets, esp low-read ones.
- Cache notebooks.
- Don't overdo it.

** Frontend 
- Tooling:
  - React is fine.
  - =create-react-app= is fine.
- State management:
  - Local state wherever possible
  - React Context when you'd otherwise be handing functions down the prop tree.
  - Immutable state unless it's ridiculous to implement.
  - Document stateful and messy stuff.
  - Cookies are fine for auth token.
  - Global stuff like cookie-loader goes in Util/Util.js

- Refs, Props, etc.
  - Avoid refs (use them for object sizing only)

- Integration with backend
  - Axios is fine
  - Patch over Put
  - Hit the server and don't get precious

- Verbs
  - =postFoo()= :: make the state of a Foo, POST it, and update state with any changes
  - =getFoo()= :: GET one foo from the server and put it into state 
  - =getFoos()= :: GET some foos from the server and put them into state 
  - =patchFoo()= :: save a foo on the server with a PUT or PATCH and put any relevant updates into state
  - =deleteFoo()= :: DELETE a foo from the server and remove it from state
  - =searchFoos()= :: search through foos from the server and remove it from state
  - =addFooToBar()= :: put Foo inside a map or array in Bar
  - =removeFooFromBar()= :: remove Foo from a map or array in Bar
  - =renderFoo()= :: drawing things in screen: overload "render"--return the JSX necessary to render a Foo

** DevOps
- One server is okay to launch.
- Measure before optimizing.
- Have an optimization path in mind.
  - Postgres search -> Elasticsearch
  - IDs -> UUIds
